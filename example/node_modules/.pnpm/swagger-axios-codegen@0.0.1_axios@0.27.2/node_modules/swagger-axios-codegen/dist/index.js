"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const prettier_1 = __importDefault(require("prettier"));
const axios_1 = __importDefault(require("axios"));
const definitionCodegen_1 = require("./definitionCodegen");
const requestCodeGen_1 = require("./requestCodeGen");
const defaultOptions = {
    className: 'Service',
    methodMode: 'path',
    type: 'ts',
    outputDir: './service',
    fileName: 'api.ts'
};
async function codegen(params) {
    let swaggerSource;
    if (params.remoteUrl) {
        const { data: swaggerJson } = await axios_1.default({ url: params.remoteUrl, responseType: 'text' });
        fs.writeFileSync('./tempswagger.json', swaggerJson);
        swaggerSource = require(path.resolve('./tempswagger.json'));
    }
    else if (params.source) {
        swaggerSource = params.source;
    }
    else {
        throw new Error('必须要给一个地址');
    }
    const options = {
        ...defaultOptions,
        ...params
    };
    let apiSource = `
  import axios, { AxiosPromise } from 'axios'
  export interface IRequestOptions{
    headers?:any
  }
`;
    apiSource += requestCodeGen_1.requestCodeGen(swaggerSource.paths, options);
    apiSource += definitionCodegen_1.definitionsCodeGen(swaggerSource.definitions);
    apiSource = prettier_1.default.format(apiSource, {
        "printWidth": 120,
        "tabWidth": 2,
        "parser": "babylon",
        "trailingComma": "none",
        "jsxBracketSameLine": false,
        "semi": false,
        "singleQuote": true
    });
    console.log('filepath', path.join(options.outputDir || '', options.fileName || ''));
    if (!fs.existsSync(options.outputDir || '')) {
        fs.mkdirSync(options.outputDir || '');
    }
    fs.writeFileSync(path.join(options.outputDir || '', options.fileName || ''), apiSource);
    fs.unlinkSync('./tempswagger.json');
}
exports.codegen = codegen;
