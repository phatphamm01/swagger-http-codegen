"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const camelcase_1 = __importDefault(require("camelcase"));
const utils_1 = require("./utils");
/**
 * 生成参数
 * @param params
 */
function getRequestParameters(params) {
    let requesetParameters = '';
    let requestFormData = '';
    let requestPathReplace = '';
    params.forEach(p => {
        let propType = '';
        // 引用类型定义
        if (p.schema) {
            propType = p.schema.items ? utils_1.refClassName(p.schema.items.$ref) : utils_1.refClassName(p.schema.$ref);
        }
        else if (p.items) {
            propType = p.items.$ref ? utils_1.refClassName(p.items.$ref) + '[]' : utils_1.toBaseType(p.items.type) + '[]';
        }
        // 基本类型
        else {
            propType = utils_1.toBaseType(p.type);
        }
        const paramName = camelcase_1.default(p.name);
        requesetParameters += `${paramName}${p.required ? '' : '?'}:${propType},`;
        // 如果参数是从formData 提交
        if (p.in === 'formData') {
            requestFormData += `
      if(parameters['${paramName}']){
        data.append('${paramName}',parameters['${paramName}'],'${paramName}')
      }\n
      `;
        }
        else if (p.in === 'path') {
            requestPathReplace += `path = path.replace('{${paramName}}',parameters['${paramName}']+'')\n`;
        }
    });
    return { requesetParameters, requestFormData, requestPathReplace };
}
function requestCodeGen(paths, options) {
    const RequestMethods = {};
    for (const [path, request] of Object.entries(paths)) {
        let methodName = utils_1.getMethodName(path);
        for (const [method, v] of Object.entries(request)) {
            methodName = options.methodMode === 'operationId' ? v.operationId : methodName;
            const contentType = v.consumes && v.consumes.includes('multipart/form-data') ? 'multipart/form-data' : 'application/json';
            let formData = '';
            let pathReplace = '';
            // 获取类名
            const className = v.tags[0];
            // 是否存在
            if (!RequestMethods[className]) {
                RequestMethods[className] = '';
            }
            let parameters = '';
            if (v.parameters) {
                const { requesetParameters, requestFormData, requestPathReplace } = getRequestParameters(v.parameters);
                parameters = `parameters: {${requesetParameters}},`;
                formData = requestFormData ? 'let data = new FormData();\n' + requestFormData : '';
                pathReplace = requestPathReplace;
            }
            let responseType = v.responses['200'] &&
                v.responses['200'].schema &&
                v.responses['200'].schema.$ref ?
                utils_1.refClassName(v.responses['200'].schema.$ref) : 'any';
            RequestMethods[className] += `
      /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
      ${camelcase_1.default(methodName)}(${parameters}options:IRequestOptions={}):AxiosPromise<${responseType}> {

        let headers = {
          'Content-Type': '${contentType}',
          ...options.headers
        }

        let path = '${path}'
        ${pathReplace}

        ${contentType === 'multipart/form-data' ? formData : ''}

        return axios({
          ...options,
          method: '${method}',
          url: path,
          headers:headers,
          ${parameters ? contentType === 'multipart/form-data' ? 'data:data'
                : 'data:parameters' : ''}
        })
      }
      `;
        }
    }
    let RequestClasses = '';
    for (const [k, v] of Object.entries(RequestMethods)) {
        RequestClasses += `
    export class ${k}Service {
      ${v}
    }`;
    }
    return RequestClasses;
}
exports.requestCodeGen = requestCodeGen;
